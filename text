ВАРИАНТ ОТ МАТЫСИК

!!!!!!!!!!!!!!!!!!!!1MAINWINDOW.XAML!!!!!!!!!!!!!!!!!!!!!!!! СПИСОК ПАРТНЕРОВ

<Window x:Class="TestDB.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:TestDB"
        mc:Ignorable="d"
        Title="Список партнеров" Height="450" Width="800" Loaded="Window_Loaded">
    <Grid>
        <!--Основные элементы окна-->
        <Grid.RowDefinitions>
            <RowDefinition Height="70"/>
            <RowDefinition Height="4*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!--Заголовок-->
        <Grid Grid.Row="0" Background="#FFF4E8D3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="70"/>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Image Source="/Resources/Мастер пол.png" Stretch="Fill" />
            <TextBlock Grid.Column="1" HorizontalAlignment="Center" Margin="0" 
                                Text="Список партнеров" VerticalAlignment="Center" FontSize="20" />
            <Button x:Name="buttonExit" Grid.Column="2" Content="Выход" 
                          HorizontalAlignment="Stretch" 
                          Margin="10" VerticalAlignment="Stretch" FontSize="20" 
                          Background="#FF67BA80" Click="buttonExit_Click"/>
        </Grid>
        <!--Список в центральной части-->
//Можно вместо ListView использовать ListBox

        <ListView x:Name="lvPartners" Grid.Row="1" HorizontalAlignment="Stretch" 
                          HorizontalContentAlignment="Stretch"
                          SelectionChanged="lvPartners_SelectionChanged">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <!--Рамка вокруг каждого элемента-->
                    <Border BorderThickness="3" BorderBrush="#FF67BA80" CornerRadius="5">
                        <!--Данные разбиты на два столбца-->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="5*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <!--Информация о партнере-->
                            <StackPanel Orientation="Vertical" Grid.Column="0">
                                <TextBlock FontSize="20" >
                                    <Run Text="{Binding PartnerType.TypeName}"/>
                                    <Run Text=" | "/>
                                    <Run Text="{Binding PartnerName}"/>
                                </TextBlock>
                                <TextBlock Text="{Binding Path=Director, StringFormat=Директор: {0}}"
                                                     FontSize="14"/>
                                <TextBlock Text="{Binding Path=Phone, StringFormat=Телефон: +7 {0}}" 
                                                     FontSize="14"/>
                                <TextBlock Text="{Binding Path=Rating, StringFormat=Рейтинг: {0}}" 
                                                     FontSize="14"/>
                            </StackPanel>
                            <!--Только одно число - скидка от продаж-->
                        <TextBlock Grid.Column="1" Text="{Binding Path=Discount, 
                                                                          StringFormat=Скидка: {0}%}" FontSize="20"/>
                        </Grid>
                    </Border>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>

        <!--Нижние кнопки-->
        <UniformGrid Grid.Row="2" Columns="2">
            <Button Name ="buttonAdd" Content="Добавить партнера" 
                          HorizontalAlignment="Stretch" 
                          Margin="10" VerticalAlignment="Stretch" FontSize="20" 
                          Background="#FF67BA80" Click="buttonAdd_Click" />
            <Button Name ="buttonHistory" Content="История реализаций партнера" 
                          FontSize="20" HorizontalAlignment="Stretch"
                          Margin="10" VerticalAlignment="Stretch" Background="#FF67BA80" />
        </UniformGrid>

    </Grid>
</Window>







!!!!!!!!!!!!!!MAINWINDOW.XAML.CS!!!!!!!!!!!!!!!!! СПИСОК ПАРТНЕРОВ

namespace TestDB
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        //Глобальный список партнеров
        List<Model.Partner> partners;
        
         public MainWindow()
        {
            InitializeComponent();
            //Создание сеанса работы с БД
            App.DB = new Model.DBPartners();
        }

        //При загрузке окна – отобразить список всех партнеров с расчетами
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            //Список всех партнеров из БД
            partners = App.DB.Partner.ToList();
            //Расчет скидки
            //Заполнение расчетного свойства в цикле для каждого партнера
            foreach (Model.Partner partner in partners)
            {
                partner.Discount = 0;		//Начальное значение скидки
                //Сначала получить список продуктов данного партнера
                var listProduct = App.DB.PartnerProduct.Where(pp => pp.PartnerId == partner.Id).ToList();
                if (listProduct != null)		//Если список не пустой, то выполняем расчеты
                {
                    //Общее количество продукции данного партера
                    int sumProductCount = listProduct.Sum(pp => pp.Count);
                    //Расчет скидки в зависимости от количества продукции
                    if (sumProductCount >= 10000 && sumProductCount < 50000) 
                        partner.Discount = 5;
                    else
                        if (sumProductCount < 300000)
                            partner.Discount = 10;
                        else
                            partner.Discount = 15;
                }
            }
            //Отобразить результаты в списке –элементе интерфейса
            lvPartners.ItemsSource = partners;
        }

        private void buttonExit_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

//Добавление нового партнера
        private void buttonAdd_Click(object sender, RoutedEventArgs e)
        {
            // Вызвать конструктор окна с пар-ми: нет выбранного партнера и 0 – режим добавления
            PartnerWindow partnerWindow = new PartnerWindow(null, 0);
            this.Hide();
            partnerWindow.ShowDialog();
            this.Show();
            //Вызвать обработчик события после открытия окна для обновления данных в окне
            Window_Loaded(null, null);
        }

//Выбор партнера из списка
        private void lvPartners_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //Получить выбранного партнера из списка
            Model.Partner partner = lvPartners.SelectedItem as Model.Partner;
            //Передать выбранного партнера в окно в режиме редактирования
            PartnerWindow partnerWindow = new PartnerWindow(partner, 1);
            this.Hide();
            partnerWindow.ShowDialog();
            this.Show();
            //Вызвать обработчик события после открытия окна для обновления данных в окне
            Window_Loaded(null, null);
        }
    }
}




!!!!!!!!!!!!!!MAINWINDOW1.XAML!!!!!!!!!!!!!!!!! ДОБАВЛЕНИЕ ПАРТНЕРОВ

<Window x:Class="TestDB.View.PartnerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:TestDB.View"
        mc:Ignorable="d"
        Title="PartnerWindow" Height="450" Width="800" Loaded="Window_Loaded">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="70"/>
            <RowDefinition Height="4*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!--Заголовок-->
        <Grid Grid.Row="0" Background="#FFF4E8D3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="70"/>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Image Source="/Resources/Мастер пол.png" Stretch="Fill" />
            <TextBlock Grid.Column="1" HorizontalAlignment="Center" Margin="0" 
                                Text="Работа с отдельным партнером" 
                                 VerticalAlignment="Center" FontSize="20" />
            <Button x:Name="buttonBack" Grid.Column="2" Content="Назад" 
                          HorizontalAlignment="Stretch"  Margin="10" VerticalAlignment="Stretch" 
                          FontSize="20" Background="#FF67BA80" Click="buttonBack_Click" />
        </Grid>
        <!--Список в центральной части-->
        <UniformGrid Grid.Row="1" Columns="2" Rows="8">
            <TextBlock Text="Тип партнера" HorizontalAlignment="Right" Margin="10"/>
            <ComboBox Name="comboTypePartner"/>
            <TextBlock Text="Название партнера" HorizontalAlignment="Right" Margin="10"/>
            <TextBox x:Name="textBoxName" />
            <TextBlock Text="ФИО директора" HorizontalAlignment="Right" Margin="10"/>
            <TextBox x:Name="textBoxDir"/>
            <TextBlock Text="Почта" HorizontalAlignment="Right" Margin="10"/>
            <TextBox x:Name="textBoxEmail"/>
            <TextBlock Text="Телефон" HorizontalAlignment="Right" Margin="10"/>
            <TextBox x:Name="textBoxPhone"/>
            <TextBlock Text="Адрес" HorizontalAlignment="Right" Margin="10"/>
            <TextBox x:Name="textBoxAdress"/>
            <TextBlock Text="ИНН" HorizontalAlignment="Right" Margin="10"/>
            <TextBox x:Name="textBoxINN"/>
            <TextBlock Text="Рейтинг" HorizontalAlignment="Right" Margin="10"/>
            <TextBox x:Name="textBoxRating"/>
        </UniformGrid>
        
        <!--Нижняя кнопка-->
        <Button Name ="buttonFixed" Grid.Row="2" Content="Фиксировать партнера" 
                     HorizontalAlignment="Stretch" Margin="100,10" VerticalAlignment="Stretch" 
                     FontSize="20" Background="#FF67BA80" Click="buttonFixed_Click" />
    </Grid>
</Window>

!!!!!!!!!!!!!!MAINWINDOW1.XAML.CS!!!!!!!!!!!!!!!!! ДОБАВЛЕНИЕ ПАРТНЕРОВ
namespace TestDB.View
{
    /// <summary>
    /// Логика взаимодействия для PartnerWindow.xaml
    /// </summary>
    public partial class PartnerWindow : Window
    {
        //Глобальные величины
        Model.Partner   partner;		//Пересланный партнер
        int mode;				//0-добавление, 1- редактирование

        public PartnerWindow()
        {
            InitializeComponent();
        }

        /// Переданный партнер или null и режим работы окна
        public PartnerWindow(Model.Partner partner, int mode)
        {
            InitializeComponent();
            this.partner = partner;	//Получить параметры
            this.mode = mode;
        }

        private void buttonBack_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        /// При загрузке отображать данные выбранного партнера или пустые поля
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            //Настроить список типов партнеров
            comboTypePartner.ItemsSource = App.DB.PartnerType.ToList();
            comboTypePartner.DisplayMemberPath = "TypeName";
            comboTypePartner.SelectedValuePath = "Id";
            comboTypePartner.SelectedIndex = 0;
            textBoxRating.Text = "0";
            textBoxRating.IsEnabled = true;
            if (mode == 1)				//Есть выбранный партнер
            {
                //Заполняем его данными элементы интерфейса
                comboTypePartner.SelectedValue = partner.TypeId;
                textBoxName.Text = partner.PartnerName;
                textBoxDir.Text = partner.Director;
                textBoxEmail.Text = partner.Email;
                textBoxPhone.Text = partner.Phone;
                textBoxAdress.Text = partner.Adress;
                textBoxINN.Text = partner.INN;
                textBoxRating.Text = partner.Rating.ToString();
            }
        }
        /// Обновить БД
        private void buttonFixed_Click(object sender, RoutedEventArgs e)
        {
            if (mode == 0)			//Новый - сначала его надо создать
            {
                partner = new Model.Partner();
            }
            //Заполняем все поля записи
            partner.TypeId = (int)comboTypePartner.SelectedValue;
            partner.PartnerName = textBoxName.Text;
            partner.Director = textBoxDir.Text;
            partner.Email = textBoxEmail.Text;
            partner.Phone = textBoxPhone.Text;
            partner.Adress = textBoxAdress.Text;
            partner.INN = textBoxINN.Text;
            //Контроль над допустимым значением рейтинга
            int resRating = 0;
            try
            {
                resRating = int.Parse(textBoxRating.Text);
                if (resRating < 0) throw new Exception("Вы ввели отрицательное число");
            }
            catch (FormatException)
            {
                MessageBox.Show("Вы ввели не число", "Контроль ввода", MessageBoxButton.OK,
                                                  MessageBoxImage.Error);
                return;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Контроль ввода", MessageBoxButton.OK,
                                               MessageBoxImage.Error);
                return;
            }
            partner.Rating = resRating;
            //Для нового надо добавить в список
            if (mode == 0)
            {
                App.DB.Partner.Add(partner);
            }
            //Обновляем БД
            try
            {
                App.DB.SaveChanges();
                MessageBox.Show("Информация успешно обновлена!", "Информация об обновлении",
                                                 MessageBoxButton.OK, MessageBoxImage.Information);
                this.Close();
            }
            catch (Exception)
            {
                MessageBox.Show("Произошла ошибка!", "Ошибка сохранения", 
                                                 MessageBoxButton.OK,  MessageBoxImage.Error);   } }  }}



!!!!!!!!!!!!!!MAINWINDOW1.XAML!!!!!!!!!!!!!!!!! ИСТОРИЯ

<Window x:Class="TestDB.View.HistoryWindow"
        Title="История реализации продукции" Height="450" Width="800">
    <Grid>

        <!--Основные элементы окна-->
        <Grid.RowDefinitions>
            <RowDefinition Height="70"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="6*"/>
        </Grid.RowDefinitions>

        <!--Заголовок-->
        <Grid Grid.Row="0" Background="#FFF4E8D3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="70"/>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="1" HorizontalAlignment="Center" Margin="0" 
                                Text="История реализации партнерами" 
                                 VerticalAlignment="Center" FontSize="20" />
            <Button x:Name="bntBack" Grid.Column="2" Content="Назад" 
                          HorizontalAlignment="Stretch" 
                          Margin="10" VerticalAlignment="Stretch" FontSize="20" 
                          Background="#FF67BA80" Click="bntBack_Click"/>
        </Grid>

        <!--Список партнеров над таблицей Истории покупок-->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="Выберите партнера для его истории покупок" 
                                FontSize="16" 
                               HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10,0"/>
            <ComboBox Name="cbPartner" Grid.Column="1" HorizontalAlignment="Stretch" 
                                  Margin="10,0" SelectionChanged="cbPartner_SelectionChanged"/>
        </Grid>

        <!--Таблица в центральной части-->
        <DataGrid x:Name="dgHistory" Grid.Row="2" AutoGenerateColumns="False" 
                         IsReadOnly="True" Margin="10" FontSize="14">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Наименование" Width="4*"
                                                       Binding="{Binding Path=Product.ProductName}" />
                <DataGridTextColumn Header="Количество" Width="*"
                                                       Binding="{Binding Path=Count}" />
                <DataGridTextColumn Header="Дата продажи" Width="2*"
                                           Binding="{Binding Path=DateSale, StringFormat={}{0:dd.MM.yyyy}}"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>


!!!!!!!!!!!!!!MAINWINDOW1.XAML.CS!!!!!!!!!!!!!!!!! ИСТОРИЯ


namespace TestDB.View
{
    /// <summary>
    /// Логика взаимодействия для HistoryWindow.xaml
    /// </summary>
    public partial class HistoryWindow : Window
    {
        public HistoryWindow()
        {
            InitializeComponent();
            //Получить список партнеров для отображения их в ComboBox
            List<Model.Partner> partners = App.DB.Partner.ToList();
            //Настройка ComboBox
            cbPartner.ItemsSource = partners;				//Данные
            cbPartner.DisplayMemberPath = "PartnerName";		//То поле, что видим
            cbPartner.SelectedValuePath = "Id";		//То поле, что будем получать значения
        }

        private void bntBack_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        /// <summary>
        /// Выбор партнера из списка - показать его покупки в таблице
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbPartner_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            dgHistory.ItemsSource = null;
            //Список продуктов выбранного партнера из ComboBox
            List<Model.PartnerProduct> partnerProducts = App.DB.PartnerProduct.
                                            Where(pp => pp.PartnerId == (int)cbPartner.SelectedValue).ToList();
            if (partnerProducts.Count == 0)
            {
                MessageBox.Show("У данного поставщика нет реализации");
                return;
            }
            else
            {
                //Отобразить список продуктов этого партнера
                dgHistory.ItemsSource = partnerProducts;
            }
        }
    }
}




!!!!!!!!!!!!!!!МЕТОД!!!!!!!!!!! ДОБАВИТЬ ОТДЕЛЬНЫЙ КЛАСС В ПРОЕКТ
namespace TestDB
{
    internal class MethodCalculate
    {
       /// <summary>
       /// Метод расчета количества материала
       /// </summary>
       /// <param name="idType"> идентификатор типа продукции</param>
       /// <param name="idMaterial">идентификатор типа материала</param>
       /// <param name="count">количество получаемой продукции</param>
       /// <param name="w">параметры продукции</param>
       /// <param name="h"></param>
       /// <returns>количество материала с учетом брака материала</returns>
       public static int CalcProduct(int idType, int idMaterial, int count, double w, double h)
         {
              int result = -1;		//Начальный результат метода, возможно такой и останется
              //Тип продукции по его id
              Model.ProductType productType = App.DB.ProductType.
                                                              Where(pt => pt.Id == idType).FirstOrDefault();
              //Тип материала по его id
              Model.MaterialType materialType = App.DB.MaterialType.
                                                              Where(mt => mt.Id == idMaterial).FirstOrDefault();
              //Проверить существование данных - корректность параметров
              if (productType != null && materialType != null)
                  {
                    //Неотрицательное количество
                    if (count >= 0)
                    {
                        //Расчеты
                        double ration = productType.Ratio; 		//Коэффициент продукции
                        //Кол-во материала без учета брака
                        double countMaterialNot = w * h * count * ration;
                        //Величина брака для данного материала
                        double defect = materialType.Defect;		//Дефект материала
                        //Размер брака по кол-ву товара
                        double countMaterialYes = countMaterialNot * defect;
                        //Кол-во нужного материала с учетом брака
                        double countMaterial = countMaterialNot + countMaterialYes;
                        //Округление в целую большую сторону
                        result = (int)Math.Ceiling(countMaterial);
                    }
                  }
                return result;
          }
    }
}






















!!!!!!!MAINWINDOW.XAML!!!!!!!!

<Window x:Class="user_30_21.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:user_30_21"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" Loaded="WindowLoaded">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="50"/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Background="#FFCF48">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50"/>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" Grid.Row="0"  Stretch="Fill" Margin="2,2,2,2"/>
            <TextBlock Grid.Column="1" Text="Список партнеров" 
                       HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="20"/>
            <Button x:Name="btnExit" Grid.Column="2" Grid.Row="0" Content="Выход" Margin="10,10,10,10" Background="#A08040" Click="btnExitClick"/>
        </Grid>
        <ListBox Grid.Row="1" x:Name="lbPartner" Margin="5" d:ItemsSource="{d:SampleData ItemCount=5}" HorizontalContentAlignment="Stretch">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Border BorderBrush="#FF67BA80" BorderThickness="1">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="6*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <StackPanel Grid.Column="0" Orientation="Vertical">
                                <TextBlock FontSize="14" FontWeight="DemiBold" Margin="15,10,0,0">
                                    <TextBlock.Text>
                                        <MultiBinding StringFormat="{}{0} | {1}">
                                            <Binding Path="MaterialType.TypeName" />
                                            <Binding Path="Name" />
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                                <TextBlock Text="{Binding MinCount}" Margin="15,0,0,0"/>
                                <TextBlock Text="{Binding Count}" Margin="15,0,0,0"/>
                                <TextBlock FontSize="14" FontWeight="DemiBold" Margin="15,10,0,0">
                                    <TextBlock.Text>
                                        <MultiBinding StringFormat="{}{0} | {1}">
                                            <Binding Path="Cost" />
                                            <Binding Path="CountPocket" />
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                            </StackPanel>
                            <StackPanel Grid.Column="1" Orientation="Vertical">
                                <TextBlock Text="{Binding discount, StringFormat={}{0}%}" Margin="10,15,0,0" FontSize="14" FontWeight="DemiBold"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button x:Name="btnAdd" Grid.Column="0" Content="Добавить партнёра" VerticalAlignment="Center" Margin="10,0,10,0" Background="#A08040" Height="35" />
            <Button x:Name="btnHistory" Grid.Column="1" Content="История покупок партнёра" VerticalAlignment="Center" Margin="10,0,10,0" Background="#A08040" Height="35" />
        </Grid>
    </Grid>
</Window>



!!!!!!!APP.XAML.CS!!!!!!!

    public partial class App : Application
    {
        public static Model.manifactureEntities DB;
    }
}








!!!!!!!MAINWINDOW.XAML.CS!!!!!!!

 public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            try
            {
                App.DB = new Model.userEntities();
                MessageBox.Show("Успешно подключились к БД", "Проверка подключения", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch
            {
                MessageBox.Show("Подключиться к БД не удалось", "Проверка подключения", MessageBoxButton.OK, MessageBoxImage.Error);
                throw;
            }
        }
        private void btnExitClick(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
        private void WindowLoaded(object sender, RoutedEventArgs e)
        {
            List<Model.Material> materials = App.DB.Material.ToList();
            foreach(Model.Material material in materials)
            {
                int sumCount = 0; // Инициализация переменной для накопления


                // Получаем все записи MaterialProduct для текущего материала

                List<Model.MaterialProduct> materialProducts = App.DB.MaterialProduct

                    .Where(mp => mp.MatId == material.Id)

                    .ToList();


                // Расчет необходимого количества

                foreach (Model.MaterialProduct materialProduct in materialProducts)

                {
                    materialProduct.MatId = sumCount++;


                }
                sumCount = sumCount * Convert.ToInt32(material.Count);



                material.discount = sumCount; // Предполагаем, что у класса Material есть свойство discount

            }


            // Установите источником данных ListBox для отображения материалов

            lbPartner.ItemsSource = materials;

        }
        }







!!!!!!!!!MATERIAL.CS!!!!!!!!!! перемеенный, добавилась скидка

 public partial class Material
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Material()
        {
            this.MaterialProduct = new HashSet<MaterialProduct>();
        }
    
        public int Id { get; set; }
        public string Name { get; set; }
        public int TypeId { get; set; }
        public double Cost { get; set; }
        public double Count { get; set; }
        public double MinCount { get; set; }
        public double CountPocket { get; set; }
        public int MetricaId { get; set; }
    
        public virtual MaterialType MaterialType { get; set; }
        public virtual Metrica Metrica { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<MaterialProduct> MaterialProduct { get; set; }
        public double discount {  get; set; }
    }

METRICA.CS

// Объявление частичного класса Metrica (может быть расширен в другом файле)
public partial class Metrica
{
    // Подавление предупреждения о вызове виртуальных методов в конструкторе
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
    public Metrica()
    {
        // Инициализация коллекции Material при создании объекта Metrica
        this.Material = new HashSet<Material>();
    }
    
    // Свойство Id - уникальный идентификатор метрики
    public int Id { get; set; }
    
    // Свойство Name - название метрики
    public string Name { get; set; }
    
    // Подавление предупреждения о том, что коллекционные свойства должны быть доступны только для чтения
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
    // Виртуальное свойство для коллекции материалов, связанных с этой метрикой
    // virtual позволяет переопределить это свойство в классах-наследниках
    public virtual ICollection<Material> Material { get; set; }
}






!!!!!!!!!!MAINWINDOW2.XAML ФОРМА РЕДАКТИРОВАНИЯ!!!!!!!!!!!!!!!


<Window x:Class="user_30_21.View.Window1"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:user_30_21.View"
        mc:Ignorable="d"
        Title="Window1" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="50"/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Background="#F4E8D3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50"/>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" Grid.Row="0" Source="/Resources/Мастер пол.png" Stretch="Fill" Margin="2,2,2,2"/>
            <TextBlock x:Name="tbTitle" Grid.Column="1" Text="Редактирование" 
                       HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="20"/>
            <Button x:Name="btnBack" Grid.Column="2" Grid.Row="0" Content="Выход" Margin="10,10,10,10" Background="#FF67BA80" />
        </Grid>

        <UniformGrid Grid.Row="1" Grid.Column="2" Rows="8">
            <TextBlock Text="Тип партнера" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5"/>
            <ComboBox Name="cbTypePartner" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="5"/>
            <TextBlock Text="Название партнера" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5"/>
            <TextBox Name="tbName" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="5"/>
            <TextBlock Text="Директор" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5"/>
            <TextBox Name="tbDirector" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="5"/>
            <TextBlock Text="Почта" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5"/>
            <TextBox Name="tbEmail" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="5"/>
            <TextBlock Text="Телефон" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5"/>
            <TextBox Name="tbPhone" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="5"/>
            <TextBlock Text="Адрес" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5"/>
            <TextBox Name="tbAddress" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="5"/>
            <TextBlock Text="ИНН" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5"/>
            <TextBox Name="tbInn" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="5"/>
            <TextBlock Text="Рейтинг" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="5"/>
            <TextBox Name="tbRanking" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="5"/>
        </UniformGrid>

        <Grid Grid.Row="2" Background="#F4E8D3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button x:Name="btnFixed" Grid.Row="0" Content="Фиксировать изменения" Margin="250,10,250,10" Background="#FF67BA80" />

        </Grid>
    </Grid>
</Window>






MAINWINDOW2.XAML ИСТОРИЯ

<Window x:Class="user_30_21.View.Window2"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:user_30_21.View"
        mc:Ignorable="d"
        Title="Window2" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="50"/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Background="#F4E8D3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50"/>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Image Grid.Column="0" Grid.Row="0" Stretch="Fill" Margin="2,2,2,2"/>
            <TextBlock x:Name="tbTitle" Grid.Column="1" Text="История" 
                       HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="20"/>
            <Button x:Name="btnBack" Grid.Column="2" Grid.Row="0" Content="Выход" Margin="10,10,10,10" Background="#FF67BA80" />
        </Grid>
        <DataGrid Grid.Row="1" x:Name="dgHistory" AutoGenerateColumns="False" Margin="20">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Наименование товара" Width="*" Binding="{Binding Product.ProductName}"/>
                <DataGridTextColumn Header="Количество товара" Width="*" Binding="{Binding Count}"/>
                <DataGridTextColumn Header="Дата продажи" Width="*" Binding="{Binding DateSale, StringFormat={}(0:dd.MM.yyyy)}"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
